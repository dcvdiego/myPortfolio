/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { Ref, useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    Mesh: THREE.Mesh;
    Mesh_1: THREE.Mesh;
    Mesh_2: THREE.Mesh;
  };
  materials: {
    Mat: THREE.MeshStandardMaterial;
    ['Mat.6']: THREE.MeshStandardMaterial;
    ['Mat.4']: THREE.MeshStandardMaterial;
  };
};

export default function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF('/glb/phone.glb') as GLTFResult;
  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    group.current!.rotation.x = THREE.MathUtils.lerp(
      group.current!.rotation.x,
      Math.cos(t / 2) / 10 + 0.25,
      0.1
    );
    group.current!.rotation.z = THREE.MathUtils.lerp(
      group.current!.rotation.z,
      Math.sin(t / 4) / 20,
      0.1
    );
    group.current!.position.y = THREE.MathUtils.lerp(
      group.current!.position.y,
      (15 + Math.sin(t)) / 5,
      0.1
    );
  });
  return (
    <group ref={group as Ref<THREE.Group>} {...props} dispose={null}>
      <group
        position={[-0.47, 0.3, -0.62]}
        rotation={[Math.PI / 2, -0.87, 0]}
        scale={0.02}
      >
        <mesh geometry={nodes.Mesh.geometry} material={materials.Mat} />
        <mesh geometry={nodes.Mesh_1.geometry} material={materials['Mat.6']} />
        <mesh geometry={nodes.Mesh_2.geometry} material={materials['Mat.4']} />
      </group>
    </group>
  );
}

useGLTF.preload('/glb/phone.glb');
